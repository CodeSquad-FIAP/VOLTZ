package model;

import db.OracleConnection;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class User extends Entity {
    private int id;
    private String email;
    private String password;

    public User(String name, int id, String email, String password) {
        super(name);
        this.id = id;
        this.email = email;
        this.password = password;
    }

    public int getId() { return id; }
    public String getEmail() { return email; }
    public String getPassword() { return password; }

    public void setId(int id) { this.id = id; }
    public void setEmail(String email) { this.email = email; }
    public void setPassword(String password) { this.password = password; }

    @Override
    public void showInfo() {
        System.out.println("User: " + name + ", Email: " + email + ", ID: " + id);
    }

    // ===================== M√âTODOS DE INTEGRA√á√ÉO COM DB =====================

    /**
     * Verifica se um usu√°rio com o ID especificado j√° existe no banco
     */
    public static boolean existsById(int id) {
        String sql = "SELECT COUNT(*) FROM users WHERE id = ?";
        try (Connection conn = OracleConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0;
                }
            }
        } catch (SQLException e) {
            System.err.println("‚ùå Erro ao verificar exist√™ncia do usu√°rio por ID: " + e.getMessage());
        }
        return false;
    }

    /**
     * Verifica se um usu√°rio com o email especificado j√° existe no banco
     */
    public static boolean existsByEmail(String email) {
        String sql = "SELECT COUNT(*) FROM users WHERE email = ?";
        try (Connection conn = OracleConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, email);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0;
                }
            }
        } catch (SQLException e) {
            System.err.println("‚ùå Erro ao verificar exist√™ncia do usu√°rio por email: " + e.getMessage());
        }
        return false;
    }

    /**
     * Gera o pr√≥ximo ID dispon√≠vel automaticamente
     */
    public static int getNextAvailableId() {
        String sql = "SELECT NVL(MAX(id), 0) + 1 FROM users";
        try (Connection conn = OracleConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            if (rs.next()) {
                return rs.getInt(1);
            }
        } catch (SQLException e) {
            System.err.println("‚ùå Erro ao buscar pr√≥ximo ID: " + e.getMessage());
        }
        return 1; // Retorna 1 se houver erro
    }

    /**
     * Inserir usu√°rio no banco com verifica√ß√µes de duplicidade
     */
    public void insert() {
        // Verificar se j√° existe usu√°rio com mesmo ID
        if (existsById(this.id)) {
            System.err.println("‚ö†Ô∏è Usu√°rio com ID " + this.id + " j√° existe. Gerando novo ID...");
            this.id = getNextAvailableId();
            System.out.println("‚ÑπÔ∏è Novo ID gerado: " + this.id);
        }

        // Verificar se j√° existe usu√°rio com mesmo email
        if (existsByEmail(this.email)) {
            System.err.println("‚ùå Usu√°rio com email '" + this.email + "' j√° existe. Inser√ß√£o cancelada.");
            return;
        }

        String sql = "INSERT INTO users (id, name, email, password) VALUES (?, ?, ?, ?)";
        try (Connection conn = OracleConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id);
            stmt.setString(2, name);
            stmt.setString(3, email);
            stmt.setString(4, password);

            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("‚úÖ Usu√°rio inserido com sucesso: " + name + " (ID: " + id + ")");
            } else {
                System.out.println("‚ö†Ô∏è Nenhuma linha foi inserida.");
            }
        } catch (SQLException e) {
            if (e.getErrorCode() == 1) { // ORA-00001: unique constraint violated
                System.err.println("‚ùå Erro de chave duplicada: " + e.getMessage());
                System.err.println("üí° Verifique se o ID (" + id + ") ou email ('" + email + "') j√° existem no banco.");
            } else {
                System.err.println("‚ùå Erro ao inserir usu√°rio: " + e.getMessage());
            }
        }
    }

    /**
     * Inserir usu√°rio com ID autom√°tico
     */
    public void insertWithAutoId() {
        this.id = getNextAvailableId();
        insert();
    }

    /**
     * Atualizar dados do usu√°rio
     */
    public void update() {
        if (!existsById(this.id)) {
            System.err.println("‚ùå Usu√°rio com ID " + this.id + " n√£o existe. N√£o √© poss√≠vel atualizar.");
            return;
        }

        String sql = "UPDATE users SET name = ?, email = ?, password = ? WHERE id = ?";
        try (Connection conn = OracleConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, name);
            stmt.setString(2, email);
            stmt.setString(3, password);
            stmt.setInt(4, id);

            int rows = stmt.executeUpdate();
            if (rows > 0) {
                System.out.println("‚úÖ Usu√°rio atualizado com sucesso: " + name + " (ID: " + id + ")");
            } else {
                System.out.println("‚ö†Ô∏è Nenhuma linha foi atualizada.");
            }
        } catch (SQLException e) {
            if (e.getErrorCode() == 1) { // ORA-00001: unique constraint violated
                System.err.println("‚ùå Erro: Email '" + email + "' j√° est√° sendo usado por outro usu√°rio.");
            } else {
                System.err.println("‚ùå Erro ao atualizar usu√°rio: " + e.getMessage());
            }
        }
    }

    /**
     * Excluir usu√°rio do banco
     */
    public void delete() {
        if (!existsById(this.id)) {
            System.err.println("‚ùå Usu√°rio com ID " + this.id + " n√£o existe. N√£o √© poss√≠vel excluir.");
            return;
        }

        String sql = "DELETE FROM users WHERE id = ?";
        try (Connection conn = OracleConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id);

            int rows = stmt.executeUpdate();
            if (rows > 0) {
                System.out.println("‚úÖ Usu√°rio exclu√≠do com sucesso: " + name + " (ID: " + id + ")");
            } else {
                System.out.println("‚ö†Ô∏è Nenhuma linha foi exclu√≠da.");
            }
        } catch (SQLException e) {
            System.err.println("‚ùå Erro ao excluir usu√°rio: " + e.getMessage());
        }
    }

    /**
     * Buscar usu√°rio por ID
     */
    public static User findById(int id) {
        String sql = "SELECT id, name, email, password FROM users WHERE id = ?";
        try (Connection conn = OracleConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return new User(
                            rs.getString("name"),
                            rs.getInt("id"),
                            rs.getString("email"),
                            rs.getString("password")
                    );
                }
            }
        } catch (SQLException e) {
            System.err.println("‚ùå Erro ao buscar usu√°rio por ID: " + e.getMessage());
        }
        return null;
    }

    /**
     * Buscar usu√°rio por email
     */
    public static User findByEmail(String email) {
        String sql = "SELECT id, name, email, password FROM users WHERE email = ?";
        try (Connection conn = OracleConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, email);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return new User(
                            rs.getString("name"),
                            rs.getInt("id"),
                            rs.getString("email"),
                            rs.getString("password")
                    );
                }
            }
        } catch (SQLException e) {
            System.err.println("‚ùå Erro ao buscar usu√°rio por email: " + e.getMessage());
        }
        return null;
    }

    /**
     * Recuperar todos os usu√°rios do banco
     */
    public static List<User> getAllUsers() {
        List<User> users = new ArrayList<>();
        String sql = "SELECT id, name, email, password FROM users ORDER BY id";
        try (Connection conn = OracleConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                User u = new User(
                        rs.getString("name"),
                        rs.getInt("id"),
                        rs.getString("email"),
                        rs.getString("password")
                );
                users.add(u);
            }
        } catch (SQLException e) {
            System.err.println("‚ùå Erro ao recuperar usu√°rios: " + e.getMessage());
        }
        return users;
    }

    /**
     * Exibir todos os usu√°rios no console
     */
    public static void displayAllUsers() {
        List<User> users = getAllUsers();
        System.out.println("=== LISTA DE USU√ÅRIOS (" + users.size() + " encontrado(s)) ===");
        if (users.isEmpty()) {
            System.out.println("Nenhum usu√°rio encontrado no banco de dados.");
        } else {
            for (User u : users) {
                u.showInfo();
            }
        }
    }

    /**
     * Limpar todos os usu√°rios da tabela (usar com cuidado!)
     */
    public static void deleteAllUsers() {
        String sql = "DELETE FROM users";
        try (Connection conn = OracleConnection.getConnection();
             Statement stmt = conn.createStatement()) {
            int rows = stmt.executeUpdate(sql);
            System.out.println("‚úÖ " + rows + " usu√°rio(s) exclu√≠do(s) da tabela.");
        } catch (SQLException e) {
            System.err.println("‚ùå Erro ao limpar tabela de usu√°rios: " + e.getMessage());
        }
    }
}